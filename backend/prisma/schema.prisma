generator client {
  provider = "prisma-client-js"
}

// Database connection configuration
datasource db {
  provider = "postgresql"
  // Main connection URL using connection pooler (port 6543)
  // Used for regular database operations
  url      = env("SUPABASE_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  client_id      String?
  client_secret  String?
  strava_id      Int       @unique
  accessToken    String?
  refreshToken   String?
  TokenExpiresAt DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  // Relations
  connections  Connection[]   @relation("UserConnections")
  following    Connection[]   @relation("UserFollowing")
  routes       Route[]
  activities   Activity[]
  goals        Goal[]
  chatRooms    ChatRoomUser[]
  sentMessages Message[]      @relation("SentMessages")
  userProfile  UserProfile?
}

model Connection {
  id                Int       @id @default(autoincrement())
  user_id           Int
  following_user_id Int
  created_at        DateTime  @default(now())
  deleted_at        DateTime?

  // Relations
  user           User @relation("UserConnections", fields: [user_id], references: [id])
  following_user User @relation("UserFollowing", fields: [following_user_id], references: [id])
}

model Route {
  id             Int       @id @default(autoincrement())
  user_id        Int
  route_name     String    @default("none")
  route_data     Json
  distance       Float
  elevation_data Json?
  difficulty     String?
  is_favorite    Boolean?  @default(false)
  created_at     DateTime  @default(now())
  deleted_at     DateTime?

  // Relations
  user       User       @relation(fields: [user_id], references: [id])
  activities Activity[]
}

model Activity {
  id                 Int       @id @default(autoincrement())
  user_id            Int
  route_id           Int?
  activity_type      String?
  name               String?
  distance           Float
  duration           Int
  average_speed      Float?
  max_speed          Float?
  avg_heartRate      Int?
  max_heartRate      Int?
  calories           Int?
  start_time         DateTime
  end_time           DateTime?
  route_data         Json?
  description        String?
  strava_activity_id String?

  // Relations
  user  User   @relation(fields: [user_id], references: [id])
  route Route? @relation(fields: [route_id], references: [id])
}

model Goal {
  id              Int       @id @default(autoincrement())
  user_id         Int
  year            String
  month           String
  total_distance  Float     @default(0)
  average_speed   Float     @default(0)
  calories_burned Float     @default(0)
  current         Float?    @default(0)
  start_date      DateTime?
  end_date        DateTime?
  deleted_at      DateTime?

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  senderId   Int
  chatRoomId Int

  // Relationships
  sender   User     @relation("SentMessages", fields: [senderId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users    ChatRoomUser[]
  messages Message[]
}

model ChatRoomUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatRoomId Int
  joinedAt   DateTime @default(now())

  // Relationships
  user     User     @relation(fields: [userId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@unique([userId, chatRoomId])
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  user_id        Int      @unique
  firstname      String?
  lastname       String?
  city           String?
  state          String?
  country        String?
  sex            String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  profile_medium String?
  profile        String?

  // Relation to User
  user User @relation(fields: [user_id], references: [id])
}
